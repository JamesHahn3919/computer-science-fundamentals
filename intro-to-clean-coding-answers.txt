Exercises

1. In your own words, explain what clean code is and why it is important.

Clean code is the process of writing readable and maintainable code that adheres to a set of principles (such as DRY, SRP, etc.) that make it reusable and easy to understand, even by someone who didn't write it.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

While obviously not as dire of a circumstance as a car's programming malfunctioning, the first thing that came to mind was ATMs. If a company werer to produce a line of ATMs with shoddy engineering, it could result in improper amounts of money being dispensed, no money being dispensed at all, or even leaving users information vulnerable to cybersecurity risks.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code. 

Yes, because while a formula to convert degrees is used twice, one is for converting F to C, and one is for converting C to F. Attempting to extract these to a reusable formula would not adhere to single responsiblity principle.

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

Yes, because the calcPercent function is correctly separated from the PRINT percentage line, allowing it to be reused later if necessary.

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

  a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

  VAR finalTotal(
      subTotal * discountRate + (subTotal * tax)
  )

  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + finalTotal

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - finalTotal
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + finalTotal
   END IF
END FUNCTION

  b. The following function checks out a book if there are no issues with the guest's account.
  
  FUNCTION checkoutBook(book, guest)
  IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
   APPEND book to guest.books
   SET book.status to "Checked Out"
   PRINT "Your books have been issued."
 END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

  c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

  CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardStatus
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkingAccountStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Programming Questions

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

var sum (for(var i = 0; i < integers.length; i++) {
        sum += integers[i];
    }
    return sum;
     )

function sumSquare(
     for(var i=0; i < integers.length; i++) {
        if(integers[i] === squareRoot(sum)) {
            return integer;
        }
    }

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicates(
    var counts = [];
    for(var i = 0; i <= integers.length; i++) {
        if(counts[integers[i]] ===) {
            counts[a[i]] = 1;
        } else {
            return true;
        }
    }
    return false;
)
Exercises

1. What is time complexity and what is its relation to algorithms?

A: Time complexity is a function that helps to estimate the time a program will take to execute. It's relation to algorithms is due to it's usefulness in assessing how efficient an algorithm is.

2. What is runtime?

A: Runtime is the physical time duration of an algorithm and is frequently used synonymously with time complexity.

3. How is the runtime of an algorithm calculated?

A: Runtime/time complexity is calculated by adding up how many instruction an algorithm executes as a function of the size of it's input, then simplifying that expression to it's largest term and dropping any constants.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
  
  A:
  a) Constant growth rate, Logarithmic growth rate, linear growth rate, log-linear growth rate, quadratic growth rate, exponential growth rate
  b) Constant growth rate, Logarithmic growth rate, linear growth rate, log-linear growth rate, quadratic growth rate, cubic growth rate, exponential growth rate

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: The time it takes to get through the customer service line at a store can be represented by a linear growth rate. The customer service employee will have to help each customer in line before getting to you, so if there is 12 customers in front you, the runtime will be much longer than if there is only 4 customers in front of you

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n) ///Linear growth rate

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2) ///Quadratic growth rate

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n) ///Exponential growth rate

9. Out of the code snippets you just saw, which is the most time efficient?

A: The linear search example is the most effecient. 
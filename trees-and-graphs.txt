Exercises 

1. What is a binary tree and what makes it unique to other trees?

A binary tree is a data structure that is characterized by each parent node having no more than two child nodes.

2. What is a heuristic?

Guesses made by an algorithm that make it easier to solve problems faster by sacrificing accuracy.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A navigation app needing to reroute when a road is blocked off

4. What is the difference between a depth-first search and a breadth-first search?

depth-first searches will travel down a single branch one by one to search for the desired elements, while breadth first will search rows of nodes at a time

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

a graph that has ambiguous edges connecting it's nodes, does not loop, and does not assign cost of travel between nodes

6. What kind of graph is a binary search tree?

an a-cyclic, undirected, unweighted graph

Programming Questions

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

function findNumber(numberToFind) {
  var currentNode = this.root;

  while (currentNode != null) {
    if (numberToFind === currentNode.value) {
      return " currentNode.value + " exists in this tree";
    } else if (numberToFind < currentNode.value){
      currentNode = currentNode.left;
    } else {
      currentNode = currentNode.right;
    }
  }
  return numberToFind + " doesn't exist in this tree";
}

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

function getDistance(root, node1, node2) {

  var ancestor = LCA(root, node1, node2);
  var depth1 = getDepth(root, ancestor); 
  var depth2 = getDepth(root, node1); 
  var depth3 = getDepth(root, node2); 

  return depth2 + depth3 - 2 * depth1;
}

function LCA(currentNode, node1, node2) {
  if (currentNode == null)
    return null;
  if (currentNode == node1 || currentNode == node2)
    return currentNode;
  var left = LCA(currentNode.left, node1, node2); 
  var right = LCA(currentNode.right, node1, node2); 
  if(left != null && right != null)
    return currentNode;
  return left == null? right: left;
}

function getDepth(currentNode, targetNode) {
  if (currentNode == null)
    return -1;
  if (currentNode == targetNode)
    return 0;
  var left = getDepth(currentNode.left, targetNode);
  var right = getDepth(currentNode.right, targetNode);
  if (left == -1 && right == -1)
    return -1;
  return left == -1? right + 1: left + 1;
}